//SPDX-License-Identifier:GPL-3.0
pragma solidity >= 0.5.0 < 0.9.0;


contract Timelock{
    error Timestamp_Not_in_Range();
    error NottheOwner();
    error AlreadyQueuedError(bytes32 txId);
    error TimestampNotInRangeError(uint blockTimestamp, uint timestamp);
    error NotQueuedError(bytes32 txId);
    error TimestampNotPassedError(uint blockTimestamp, uint timestamp);
    error TimestampExpiredError(uint blockTimestamp, uint expiresAt);
    error TxFailedError();


    event Queue(
    bytes32 indexed txId,
    address indexed _target,
    uint value,
    string func,
    bytes data,
    uint timestamp
    )




    address public Owner;
    uint public constant MIN_DELAY = 10;
    uint public constant MAX_DELAY = 1000;
    uint public constant GRACE_PERIOD = 1000;

    mapping(bytes32 =>bool) public queued;

    constructor() {
        Owner = msg.sender;
    }

    receive() external payable {}

    modifier onlyOwner() {
        if (msg.sender != Owner)
        {
            revert NottheOwner();
        }
        _;
}

function getTxId(
    address _target,
    uint _value,
    string calldata  _func,
    bytes calldata _data,
    uint _timestamp ) public pure returns(bytes32 txId)

    {
        return keccak256(abi.encode(_target, _value, _func, _data, _timestamp));
    }

function queue(
    address _target,
    uint _value,
    string calldata  _func,
    bytes calldata _data,
    uint _timestamp ) external onlyOwner {

        bytes32 txId = getTxId(_target, _value, _func, _data, _timestamp);
        if(queued[txId]){
            revert AlreadyQueuedError(txId);
        }

        if(
            _timestamp < block.timestamp + MIN_DELAY ||
            _timestamp > block.timestamp + MAX_DELAY
        ) 
        {
            revert TimestampNotInRangeError(block.timestamp, _timestamp);
        }

        queued[txId] = true;
        emit Queue(txId, _target, _value, _func, _data, _timestamp
            );
    }

    function execute(
    address _target,
    uint _value,
    string calldata _func,
    bytes calldata _data,
    uint _timestamp 
    ) external payable onlyOwner returns (bytes memory){
        bytes32 txId = getTxId(_target, _value, _func, _data, _timestamp);
        if (!queued[txId]) {
            revert NoQueuedError([txId]);
        }
        if (block.timestamp < _timestamp) {
            revert TimestampNotPassedError(block.timestamp, _timestamp);
        }

        if (block.timestamp > _timestamp + GRACE PERIOD) {
            revert TimestampExpiredError(block.timestamp, _timestamp + GRACE PERIOD);
        }

        queued[txId] = false;

        if (bytes(_func).length >0) {
            data = abi.encodePacked (
                bytes4(keccak256(bytes(_func))), _data
            );
        } else {
            data = _data;
        }

       (bool ok, bytes memory res) =  _target.call{value: _value}(data);
       if (!ok) {
           revert TxFailedError();
       }

       emit Execute(txId, _target, _value, _func, _data, _timestamp);
       return res;
    }

    function cancel(bytes)

        
    

}
}
 
